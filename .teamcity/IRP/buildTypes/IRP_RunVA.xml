<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="7f2b4266-2190-45dc-8a50-eaa7d2e2fa01" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>3. RunVA</name>
  <description />
  <settings>
    <options>
      <option name="allowExternalStatus" value="true" />
      <option name="artifactRules" value="+:allure-report.zip&#xA;+:Cover.zip&#xA;+:%teamcity.project.id%.zip" />
      <option name="cleanBuild" value="true" />
    </options>
    <disabled-settings>
      <setting-ref ref="BUILD_EXT_19" />
    </disabled-settings>
    <parameters>
      <param name="env.BranchToStartVA" value="develop" />
      <param name="env.CloseVA" value="true" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.ConfigurationFileName" value="%env.Database1CName%" />
      <param name="env.Database1CName" value="" />
      <param name="env.DebugPort" value="" />
      <param name="env.DebugVA" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.LogFile1C" value="%system.teamcity.build.workingDir%\Log1C.log" />
      <param name="env.OScript" value="C:/OneScript" />
      <param name="env.PID_ID" value="0" />
      <param name="env.PortStartNumber" value="0" />
      <param name="env.RunSaasMode" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.SaasTag" value="SaasPrepare" />
      <param name="env.SonarParamCover" value="" />
      <param name="env.StartDebug" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.StopOnError" value="false" spec="checkbox uncheckedValue='false' display='normal' checkedValue='true'" />
      <param name="env.StreamCount" value="3" />
      <param name="env.TR_Bank_Key" value="credentialsJSON:8036a633-0c14-4d64-991c-b98b36c82dd1" spec="password display='normal' readOnly='true'" />
      <param name="env.TagsFullList" value="&quot;TestDataBase&quot;,&quot;Movements&quot;,&quot;Discount&quot;,&quot;StockControl&quot;,&quot;Forms&quot;,&quot;FillingDocuments&quot;,&quot;CreationBasedMulti&quot;,&quot;Other&quot;,&quot;PlannedReceiptReservation&quot;,&quot;CashManagement&quot;,&quot;Inventory&quot;,&quot;BankCashDocuments&quot;,&quot;Filters&quot;,&quot;Purchase&quot;,&quot;AdditionalAttributes&quot;,&quot;UserSettings&quot;,&quot;Sales&quot;,&quot;LinkedTransaction&quot;,&quot;AgingAndCreditLimit&quot;,&quot;RetailDocuments&quot;,&quot;PartnerCatalogs&quot;,&quot;InfoMessages&quot;,&quot;ExtensionReportForm&quot;,&quot;ContactInformation&quot;,&quot;StandartAgreement&quot;,&quot;AccessRights&quot;,&quot;ItemCatalogs&quot;,&quot;PhysicalInventory&quot;,&quot;Price&quot;,&quot;SerialLotNumber&quot;,&quot;InputBySearchInLine&quot;,&quot;LoadInfo&quot;,&quot;Services&quot;,&quot;SettingsCatalogs&quot;,&quot;BasicFormsCheck&quot;,&quot;OpeningEntries&quot;,&quot;InventoryTransfer&quot;,&quot;UserCatalogs&quot;,&quot;CompanyCatalogs&quot;,&quot;TaxCalculation&quot;,&quot;PrintForm&quot;,&quot;CurrencyRate&quot;,&quot;Barcodes&quot;,&quot;SalesOrderProcurement&quot;,&quot;Advance&quot;" spec="select data_33='&quot;InputBySearchInLine&quot;' data_32='&quot;SerialLotNumber&quot;' data_35='&quot;Services&quot;' data_34='&quot;LoadInfo&quot;' data_31='&quot;Price&quot;' data_30='&quot;PhysicalInventory&quot;' data_37='&quot;BasicFormsCheck&quot;' data_36='&quot;SettingsCatalogs&quot;' data_39='&quot;ProcurementDataProc&quot;' data_38='&quot;OpeningEntries&quot;' data_44='&quot;PrintForm&quot;' data_43='&quot;TaxCalculation&quot;' data_02='&quot;ErrorsTest&quot;' data_46='&quot;Barcodes&quot;' data_01='&quot;StressTesting&quot;' data_45='&quot;CurrencyRate&quot;' data_40='&quot;InventoryTransfer&quot;' data_42='&quot;CompanyCatalogs&quot;' data_41='&quot;UserCatalogs&quot;' data_08='&quot;Forms&quot;' data_07='&quot;StockControl&quot;' data_09='&quot;FillingDocuments&quot;' data_04='&quot;Advance&quot;' data_48='&quot;PlannedReceiptReservation&quot;' data_03='&quot;TestDataBase&quot;' data_47='&quot;SalesOrderProcurement&quot;' data_06='&quot;Discount&quot;' data_05='&quot;Movements&quot;' data_11='&quot;Other&quot;' data_10='&quot;CreationBasedMulti&quot;' data_13='&quot;Inventory&quot;' data_12='&quot;CashManagement&quot;' data_19='&quot;Sales&quot;' data_18='&quot;UserSettings&quot;' data_15='&quot;Filters&quot;' data_14='&quot;BankCashDocuments&quot;' data_17='&quot;AdditionalAttributes&quot;' data_16='&quot;Purchase&quot;' display='normal' multiple='true' data_22='&quot;RetailDocuments&quot;' data_21='&quot;AgingAndCreditLimit&quot;' data_24='&quot;InfoMessages&quot;' data_23='&quot;PartnerCatalogs&quot;' data_20='&quot;LinkedTransaction&quot;' valueSeparator=',' data_29='&quot;ItemCatalogs&quot;' data_26='&quot;ContactInformation&quot;' data_25='&quot;ExtensionReportForm&quot;' data_28='&quot;AccessRights&quot;' data_27='&quot;StandartAgreement&quot;'" />
      <param name="env.VA.FeaturePath" value="%teamcity.build.workingDir%/features/" />
      <param name="env.VA_PID" value="" />
      <param name="env.dbgs_PID" value="" />
    </parameters>
    <build-runners>
      <runner id="RUNNER_31" name="Copy add data  proc from tools" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[Copy-Item -Path "%teamcity.tool.ExtDataProc%/*" -Destination "%teamcity.build.workingDir%/DataProcessor"

New-Item %system.teamcity.build.workingDir%/Cover.xml
Set-Content %system.teamcity.build.workingDir%/Cover.xml "<coverage version=""1""/>"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_54" name="Create new Template DB" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[start /wait "1cv8.exe" %env.PathTo1CPlatform%  CREATEINFOBASE File=%system.teamcity.build.workingDir%\TempDB;Locale=en; /UseTemplate %teamcity.tool.TemplateIRP%\TemplateIRP.dt /Out %env.LogFile1C%

echo ##teamcity[compilationStarted compiler='Log from 1C: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else  echo -e ""\e[34m $line""; fi;  done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C: %env.LogFile1C%']

start /wait "1cv8.exe" %env.PathTo1CPlatform%  DESIGNER %env.ConnectionTo1C% /Out %env.LogFile1C%  /LoadCfg %system.teamcity.build.workingDir%\%teamcity.project.id%.cf /UpdateDBCfg
echo ##teamcity[compilationStarted compiler='Log from 1C Update CF: %env.LogFile1C%']
sh -c "while read line; do if [[ $line == *"Error"* ]]; then echo -e ""\e[31m $line""; else  echo -e ""\e[34m $line""; fi;  done < ""%env.LogFile1C%"";"
echo ##teamcity[compilationFinished compiler='Log from 1C Update CF: %env.LogFile1C%']

rd /q /s "%%userprofile%%\AppData\Local\1C\1Cv8\"
rd /q /s "%%userprofile%%\AppData\Roaming\1C\1Cv8\"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_55" name="Start debug" type="jetbrains_powershell">
        <conditions>
          <equals name="env.StartDebug" value="true" />
        </conditions>
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
$ProcessInfo.FileName = "%env.PathTo1CBin%\dbgs.exe" 
$ProcessInfo.UseShellExecute = $false 
$port = Get-Random -Minimum 1400 -Maximum 1500
echo "##teamcity[setParameter name='env.DebugPort' value='$port']"
$ProcessInfo.Arguments = " --addr=localhost --port=$port" 
$Process = New-Object System.Diagnostics.Process 
$Process.StartInfo = $ProcessInfo 
$Process.Start() | Out-Null  
$dbgs_PID = $Process.Id 
echo "##teamcity[setParameter name='env.dbgs_PID' value='$dbgs_PID']"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_14" name="Start Coverage" type="simpleRunner">
        <conditions>
          <equals name="env.StartDebug" value="true" />
        </conditions>
        <parameters>
          <param name="script.content"><![CDATA[coverage-cli start --infobase DefAlias  --debugger http://localhost:%env.DebugPort% --output %system.teamcity.build.workingDir%/Cover.csv > "%system.teamcity.build.tempDir%\Cover.Log"
rem coverage-cli start --infobase %env.Database1CName%  --debugger http://localhost:%env.DebugPort% --output %system.teamcity.build.workingDir%/Cover.csv > "%system.teamcity.build.tempDir%\Cover.Log"]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_61" name="Set port number" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[if("%teamcity.agent.name%" -eq "Agent One"){
	Write-Host "##teamcity[setParameter name='env.PortStartNumber' value='49000']"
} elseif ("%teamcity.agent.name%" -eq "BuildAgentTwo"){
	Write-Host "##teamcity[setParameter name='env.PortStartNumber' value='50000']"
}
 elseif ("%teamcity.agent.name%" -eq "BuildAgentThree"){
	Write-Host "##teamcity[setParameter name='env.PortStartNumber' value='51000']"
} else {
	Write-Host "##teamcity[buildStop comment='rename agent' readdToQueue='true']"
}]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_19" name="Run VA in SaaS" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[################################ENV DATA#############################################################

#if it true - then all test will be done in one DB, in separate areas, if false - for each tag will be created empty DB, based on template DB
$RunSaasMode = $%env.RunSaasMode% # can be $true or $false
#Firt tag, start at template DB. If Use Saas - has to be set
$TagForCreateSaas = "%env.SaasTag%"
#Array of all tags for test = @("Tag1", "Tag2", "TagN")
$TagArray = @(%env.TagsFullList%)
#Jobs count (how much VA can be running at the same time)
$StreamCountMax = "%env.StreamCount%"
#Start test client port
$startPort = %env.PortStartNumber%
$workingDir = "%system.teamcity.build.workingDir%"
$FeaturePath = "%env.VA.FeaturePath%" #inside 2 folders - External and Internal. In External has to be export steps, in internal - scenarios.
$OScriptLib = "%env.OScript%"
$AllureBatFilePath = "%teamcity.tool.allure-commandline%\bin\allure.bat"

$LoginTo1C = "%env.LoginTo1C%"
$PassTo1C = "%env.PassTo1C%"
$PathTo1CPlatform = %env.PathTo1CPlatform% # it has to be into quotas. Path to 1cv8.exe

$StopOnError = "%env.StopOnError%" #true or false
$CloseVA = "%env.CloseVA%" # true or false
$UseDebug = $%env.StartDebug% # $true or $false
$DebugPort = "%env.DebugPort%"
$DebugString = ""
If ($UseDebug){
    $DebugString = "/DEBUG -http -attach /DEBUGGERURL http://localhost:$DebugPort"
}

$FolderForAllArtefact = "VAResult"
######################################################################################################

New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/Params" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/allure/base" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/logpath" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/allure-zip" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/allureTag" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/logdata" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/AllSteps" | Out-Null
New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/AllSteps/Template" | Out-Null

#here has to be template DB
Copy-Item -Path "$workingDir/TempDB/1Cv8.1CD" -Destination "$workingDir/$FolderForAllArtefact/AllSteps/Template/1Cv8.1CD" | Out-Null
Compress-Archive -Path "$workingDir/$FolderForAllArtefact/AllSteps/Template/1Cv8.1CD" -DestinationPath "$workingDir/Template.zip" | Out-Null
Write-Host "##teamcity[publishArtifacts 'Template.zip => DataBase']"

function RemoveAllVirtualDesktops {
    if ((Get-DesktopCount) -gt 1) {
        do {
            Remove-Desktop
        } while ((Get-DesktopCount) -gt 1)
    }
}

$VanessaRun = {
    Param($elementTag, $startPort, $CurrentID, $RunSaasMode, $workingDir, $FeaturePath, $DebugString, $OScriptLib, $FolderForAllArtefact, $PathTo1CPlatform, $PassTo1C, $LoginTo1C, $StopOnError, $CloseVA, $AllureBatFilePath)
    $AreaID = ""
    $portmax = $startPort + 9
    $ScriptLogFilePath = "$workingDir/$FolderForAllArtefact/logdata/$elementTag.log"
    #Write-Output "##teamcity[compilationStarted compiler='VA settings $elementTag']"
    #Write-Output "$startPort - $portmax"
    $allurePath = "$workingDir/$FolderForAllArtefact/allure" | ForEach-Object { $_ -replace '\\', '/' }
    if ($RunSaasMode -and $elementTag -eq $TagForCreateSaas) {
        $TempDb = "/F$workingDir/$FolderForAllArtefact/AllSteps/Template" | ForEach-Object { $_ -replace '\\', '/' } 
        Write-Output "Run first setup in $TempDb"
    } else {
        if($RunSaasMode){
            $TempDb = "/F$workingDir/$FolderForAllArtefact/AllSteps/Template" | ForEach-Object { $_ -replace '\\', '/' } 
            $AreaID = "/Z $CurrentID"
            #Write-Output "Run DB in $TempDb /Z $CurrentID in SaaS mode"

        } else {
            $TempDb = "/F$workingDir/$FolderForAllArtefact/AllSteps/$elementTag" | ForEach-Object { $_ -replace '\\', '/' } 
            New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/AllSteps/$elementTag" | Out-Null
            Copy-Item -Path "$workingDir/TempDB/1Cv8.1CD" -Destination "$workingDir/$FolderForAllArtefact/AllSteps/$elementTag/1Cv8.1CD" | Out-Null
            #Write-Output "Run DB in $TempDb common mode"
        }
    }
         
    $connection = "' $AreaID /N $LoginTo1C /P $PassTo1C /Len /UseHwLicenses+ /TComp -SDC  /DisableStartupMessages /DisplayPerformance /DisplayAllFunctions /EnableCheckModal /EnableCheckExtensionsAndAddInsSyncCalls $DebugString'"
    
    $TempDbJson = "'$TempDb'"
    $elementTagJson = "'$elementTag'"
    $text = "{
    'AllureReport': {
        'DataAllureMarks': [],
        'attachactiveformdatatotheallurereport': false,
        'attachallformsdatatotheallurereport': false,
        'attachdataoftheoperatingsystemprocessestotheallurereport': false,
        'attacheventlogtotheallurereport': false,
        'attachnetworkconnectiondatatotheallurereport': false,
        'attachvariablestotheallurereport': false,
        'reportlevel1': '#report.epic=;catalog1',
        'reportlevel2': '#report.feature=;catalog2',
        'reportlevel3': '#report.story=;scenarioname',
        'testsuites': '',
        'DataAllureMarks':
        [
        	{
            	'RegularExpression': '',
            	'LabelName': 'thread',
            	'Value':  $elementTagJson
          	}
        ]  
    },
    'DebugLog': false,
    'DownloadFeaturesOpen': 1,
    'Lang': 'en',
    'ModelingCreateReport': false,
    'RunningScripts': {
        'SpacingStepSpecifiedUser': 0.1,
        'dosleepusingping': false,
        'makestepsasync': false,
        'numberofattemptstoperformanaction': 10,
        'pauseonwindowopening': 0,
        'pendingequalfailed': true,
        'safeexecutionofsteps': false,
        'showrownumberonerror': false,
        'stoponerror': $StopOnError,
        'timeoutforasynchronoussteps': 0,
        'timetofindwindow': 15,
        'updatestatistics': false,
        'updatetreewhenscenariostarts': false
    },
    'TestClient': {
        'datatestclients': [{
                'AddItionalParameters': $connection,
                'ClientType': 'Thin',
                'ComputerName': 'localhost',
                'Name': 'This client',
                'PathToInfobase': $TempDbJson,
                'PortTestClient': $startPort
            }
        ],
        'runtestclientwithmaximizedwindow': true,
        'testclienttimeout': 120
    },
    'Version': '1.2.034',
    'VersionVA': 'ver 1.2.034',
    'addmetainformationclicking': false,
    'addtofeaturefilter': true,
    'allurecreatereport': true,
    'closetestclient': $CloseVA,
    'collectdataoftheoperatingsystemprocesses': false,
    'collectnetworkconnectiondata': false,
    'cucumbercreatereport': false,
    'filtertags': [],
    'getactiveformdataonerror': true,
    'getallformsdataonerror': true,
    'htmlcreate': false,
    'ignoretags': ['IgnoreOnCIMainBuild', 'Negative'],
    'junitcreatereport': false,
	'JUnitReport': {},
    'librarycatalogs': [],
    'logerrorstotext': true,
    'logstepstotext': true,
    'logtogr': true,
    'logtotext': true,
    'markdowncreate': false,
    'onerrorscreenshot': true,
    'onerrorscreenshoteverywindow': false,
    'screencaptureaddinmethod': 2,
    'searchformelementsbyname': false,
    'simplereport': false,
    'thetreetagisenabledbydefault': true,
    'useaddin': true,
    'useaddinforscreencapture': true,
    'usersettingsprovider': 'FILE',
    'usesikulixserver': false,
    'vanessarun': true,
    'vanessashutdown': $CloseVA,
    'videcreate': false,
    'setvariablevaluesinstepsallurereport': true,
    'createlogs': true,
    'attachadditionaldatawhencomparingvaluewithreferenceallure': true,
    'savemxlashtmlinallure': true,
    'useaddin': false,
    'usethegherkinparserfromthevanessaextaddin': false
}"
    #Write-Output "$text"
    $a = $text | ConvertFrom-Json
    $a | Add-Member -Type NoteProperty -Name 'featurepath' -Value "$FeaturePath/Internal"
    $a | Add-Member -Type NoteProperty -Name 'projectpath' -Value "$workingDir"
    $a | Add-Member -Type NoteProperty -Name 'outputscreenshot' -Value "$workingDir/$FolderForAllArtefact/screenShots"
    $a | Add-Member -Type NoteProperty -Name 'texterrorslogname' -Value "$workingDir/$FolderForAllArtefact/errors/$elementTag"
    $a | Add-Member -Type NoteProperty -Name 'textlogname' -Value $ScriptLogFilePath
    $a | Add-Member -Type NoteProperty -Name 'testclientports' -Value "$startPort - $portmax"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'directorytobuildhierarchy' -Value "$FeaturePath"
    $a.AllureReport | Add-Member -Type NoteProperty -Name 'allurepath' -Value "$allurePath/$elementTag"
    New-Item -ItemType "directory" -Path "$workingDir/$FolderForAllArtefact/AllSteps/$elementTag/junit" | Out-Null
    $a.JUnitReport  | Add-Member -Type NoteProperty -Name 'junitpath' -Value "$workingDir/$FolderForAllArtefact/AllSteps/$elementTag/junit"
    $a | Add-Member -Type NoteProperty -Name 'logpath' -Value "$workingDir/$FolderForAllArtefact/logpath/$elementTag.log"    
   
    $a.librarycatalogs += "$workingDir/DataProcessor"
    $a.librarycatalogs += "$FeaturePath/External"
    $a.librarycatalogs += "$OScriptLib/lib/vanessa-automation/features/Libraries"
    $a.filtertags += $elementTag
  
    $b = $a | ConvertTo-Json -depth 32
    
    $VBParams="$workingDir/$FolderForAllArtefact/Params/va$elementTag.json"
    $b | set-content $VBParams

    ### Run VA ########################################################################
    $NewD = New-Desktop
    Set-DesktopName -Desktop $NewD -Name $elementTag
    Switch-Desktop -Desktop $NewD
    Start-Sleep 2
    $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
    $ProcessInfo.FileName = "$PathTo1CPlatform"
    $ProcessInfo.UseShellExecute = $false 
    $ProcessInfo.Arguments = " $AreaID /N $LoginTo1C /P $PassTo1C ""$TempDb"" /Execute ""$OScriptLib/lib/vanessa-automation/vanessa-automation.epf"" /TestManager /C""StartFeaturePlayer;QuietInstallVanessaExt;VBParams=$VBParams""" 
    $Process = New-Object System.Diagnostics.Process 
    $Process.StartInfo = $ProcessInfo 
    $Process.Start() | Out-Null  
    $processID = $Process.Id 
    Write-Output "##teamcity[setParameter name='env.VA_PID' value='$processID']"

    ### Start tail #####################################################################
    Write-Host "##teamcity[flowStarted flowId='$elementTag']"
    Write-Host "##teamcity[testSuiteStarted name='$elementTag' flowId='$elementTag']"


    # Write-Output "Wait for log file: $ScriptLogFilePath"
    Write-Host "##teamcity[testStarted  name='Wait for log file: $elementTag' flowId='$elementTag']"
    $Skip = $false
    do {
        Start-Sleep 1        
        if (!(Get-Process -id $processID -ErrorAction SilentlyContinue)){
            Write-Host "##teamcity[testFailed name='Wait for log file: $elementTag' message='Log file not found: $ScriptLogFilePath' flowId='$elementTag']"
            $Skip = $true
            break
        }
        
    } while (!(Test-Path $ScriptLogFilePath))
    Write-Host "##teamcity[testFinished name='Wait for log file: $elementTag' duration='$TotalMilliseconds' flowId='$elementTag']"
    $hasFailedTest = $false
    if (!$Skip) {
      #Write-Output "Start tail: $elementTag"

      $CurrentFeatureFile = ""
      $CurrentTest = ""
      $LastIndex = 0
      do{
          $TextInLog = Get-Content $ScriptLogFilePath -Encoding UTF8 -Force -ErrorAction SilentlyContinue

          For ($index = $LastIndex; $index -le $TextInLog.count - 1; $index++) {
              $line = $TextInLog[$index]
              if($line -match "Feature:"){
                  $FeatureFile = $line -split "\\"
                  if($CurrentFeatureFile -eq ""){
                      $CurrentFeatureFile =  $FeatureFile[$FeatureFile.count - 1]
                      Write-Host "##teamcity[testSuiteStarted name='$CurrentFeatureFile' flowId='$elementTag']"
                  }else{

                      if($CurrentTest -ne ""){
                          $EndDate = Get-Date
                          $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate
                          $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                      	  Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Database' value='$elementTag.zip!/$elementTag/1Cv8.1CD']"
                      	  Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Allure' value='allure/allure_$elementTag.zip!/index.html']"
                          Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
                          $CurrentTest = ""
                      }

                      Write-Host "##teamcity[testSuiteFinished name='$CurrentFeatureFile' flowId='$elementTag']"
                      $CurrentFeatureFile =  $FeatureFile[$FeatureFile.count - 1]
                      Write-Host "##teamcity[testSuiteStarted name='$CurrentFeatureFile' flowId='$elementTag']"
                  }

              }elseif($line -match "Script:"){
                  $Test = $line -split ":"
                  if($CurrentTest -eq ""){
                      $CurrentTest =  $Test[$Test.count - 1]
                      Write-Host "##teamcity[testStarted name='$CurrentTest' flowId='$elementTag']"
                      $CurrentDate = Get-Date
                  }else{
                      $EndDate = Get-Date
                      $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate

                      $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
                      Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Database' value='$elementTag.zip!/$elementTag/1Cv8.1CD']"
                      Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Allure' value='allure/allure_$elementTag.zip!/index.html']"
                      Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
                      $CurrentTest =  $Test[$Test.count - 1]
                      $CurrentTest = $CurrentTest.replace("|", "||").replace("'", "|'").replace("[", "|[").replace("]", "|]").replace("`n", "|n").replace("`r", "|r")
                      Write-Host "##teamcity[testStarted  name='$CurrentTest' flowId='$elementTag']"
                      $CurrentDate = Get-Date
                  }
              }elseif($line -match "Failed:"){
                  $ErrorDescription = $line -split ":"
                  if($CurrentTest -eq ""){

                  }else{
                      $ErrorDescription = $ErrorDescription.replace("|", "||").replace("'", "|'").replace("[", "|[").replace("]", "|]").replace("`n", "|n").replace("`r", "|r")
                      
                      switch -regex ($ErrorDescription)
                        {
                            'and expected value is' {
                                $matches = ([regex]'<.*?>').Matches($ErrorDescription) ;
                                $expected = $matches[$matches.Count - 1].Value.replace("<", "").replace(">", "")
                                $actual = $matches[$matches.Count - 2].Value.replace("<", "").replace(">", "")
                                Write-Host "##teamcity[testFailed type='comparisonFailure' name='$CurrentTest' details='$ErrorDescription' message='$ErrorDescription' flowId='$elementTag' expected='$expected' actual='$actual']"
                            }
                            default  {
                                Write-Host "##teamcity[testFailed name='$CurrentTest' details='$ErrorDescription' message='$ErrorDescription' flowId='$elementTag']"
                            }
                        }
                      
                      
                  }    
                  $hasFailedTest = $true
              }else{
                  if($CurrentTest -ne ""){
                      $line = $line.replace("|", "||").replace("'", "|'").replace("[", "|[").replace("]", "|]").replace("`n", "|n").replace("`r", "|r")
                      Write-Host "##teamcity[testStdOut name='$CurrentTest' out='$line' flowId='$elementTag']"
                  }            
              }
              $LastIndex = $TextInLog.count
          }
          Start-Sleep 1
      } while(Get-Process -id $processID -ErrorAction SilentlyContinue)

	}
    $EndDate = Get-Date
    $Diff =  New-TimeSpan -Start $CurrentDate -End $EndDate
                        
    $TotalMilliseconds = [math]::Round($Diff.TotalMilliseconds)
    Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Database' value='$elementTag.zip!/$elementTag/1Cv8.1CD']"
    Write-Host "##teamcity[testMetadata testName='$CurrentTest' type='artifact' name='Allure' value='allure/allure_$elementTag.zip!/index.html']"

    Write-Host "##teamcity[testFinished name='$CurrentTest' duration='$TotalMilliseconds' flowId='$elementTag']"
    Write-Host "##teamcity[testSuiteFinished name='$CurrentFeatureFile' flowId='$elementTag']"


    Write-Host "##teamcity[testSuiteFinished name='$elementTag' flowId='$elementTag']"
    Write-Host "##teamcity[flowFinished flowId='$elementTag']"
    Remove-Desktop -Desktop $NewD | Out-Null
    
    # Write-Host "publishArtifacts '$workingDir/$elementTag.zip => DataBase'"
	Compress-Archive -Path "$workingDir/$FolderForAllArtefact/AllSteps/$elementTag/1Cv8.1CD" -DestinationPath "$workingDir/$elementTag.zip"  | Out-Null
    # Write-Host "publishArtifacts '$workingDir/$FolderForAllArtefact/allure-zip/allure_$elementTag.zip => allure'"
    &$AllureBatFilePath generate "$allurePath/$elementTag" --clean -o "$workingDir/$FolderForAllArtefact/allureTag/$elementTag"  | Out-Null
	Start-Sleep 20
    Compress-Archive -Path "$workingDir/$FolderForAllArtefact/allureTag/$elementTag/*" -DestinationPath "$workingDir/$FolderForAllArtefact/allure-zip/allure_$elementTag.zip" | Out-Null
	Start-Sleep 20
	Write-Host "##teamcity[publishArtifacts '$workingDir/$elementTag.zip => DataBase']"
	Start-Sleep 5
    Write-Host "##teamcity[publishArtifacts '$workingDir/$FolderForAllArtefact/allure-zip/allure_$elementTag.zip => allure']"

#	Write-Host "importData importData type='junit' path='$FolderForAllArtefact/AllSteps/$elementTag/junit'"
#	Write-Host "##teamcity[importData type='junit' path='$FolderForAllArtefact/AllSteps/$elementTag/junit']"

}
RemoveAllVirtualDesktops
$JobArray = @{}
$JobTimes = @{}
$CurrentID = 0
if ($RunSaasMode) {
    $elementTag = "$TagForCreateSaas"
    $startPort += 10
    $JobTailProc = Start-Job -scriptBlock $VanessaRun -ArgumentList $elementTag,$startPort,$CurrentID,$RunSaasMode,$workingDir,$FeaturePath,$DebugString,$OScriptLib,$FolderForAllArtefact,$PathTo1CPlatform,$PassTo1C,$LoginTo1C,$StopOnError,$CloseVA,$AllureBatFilePath
    $CurrentDate = Get-Date
    $JobArray.Add($elementTag,$JobTailProc)
    $JobTimes = $JobTimes + @{$elementTag=@($CurrentDate, "")}
    $NumberJob = $JobTimes.count
    Write-Host "Start SaaS prepare"

    do {
        Start-Sleep 1
            $listsToDelete = @()

            $JobArray.GetEnumerator() | ForEach-Object {
                $key = $($_.key)
                $JobArray[$key] | Receive-Job
                if ($JobArray[$key].State -eq "Running") {

                }elseif ($JobArray[$key].State -eq "Completed") {
                    $listsToDelete += $key
                }else{
                    
                }
            }
            foreach($listToDelete in $listsToDelete) {
                $JobArray.Remove($listToDelete)
            }
    } while ($JobArray.count)

}

foreach ($elementTag in $TagArray) {
    $startPort += 10
    $CurrentID += 1
    $JobTailProc = Start-Job -scriptBlock $VanessaRun -ArgumentList $elementTag,$startPort,$CurrentID,$RunSaasMode,$workingDir,$FeaturePath,$DebugString,$OScriptLib,$FolderForAllArtefact,$PathTo1CPlatform,$PassTo1C,$LoginTo1C,$StopOnError,$CloseVA,$AllureBatFilePath
    $CurrentDate = Get-Date
    $JobArray.Add($elementTag,$JobTailProc)
    $JobTimes = $JobTimes + @{$elementTag=@($CurrentDate, "")}
    $NumberJob = $JobTimes.count
    #Write-Host "Start $elementTag at $CurrentDate #$NumberJob/$TotalTags"

    do {
        Start-Sleep 1
            $listsToDelete = @()

            $JobArray.GetEnumerator() | ForEach-Object {
                $key = $($_.key)
                $JobArray[$key] | Receive-Job
                if ($JobArray[$key].State -eq "Running") {

                }elseif ($JobArray[$key].State -eq "Completed") {
                    $listsToDelete += $key
                }else{
                    
                }
            }
            foreach($listToDelete in $listsToDelete) {
                $JobArray.Remove($listToDelete)
            }
    } while ($JobArray.count -ge $StreamCountMax)
}

do {
    Start-Sleep 1
        $listsToDelete = @()

        $JobArray.GetEnumerator() | ForEach-Object {
            $key = $($_.key)
            $JobArray[$key] | Receive-Job
            if ($JobArray[$key].State -eq "Running") {

            }elseif ($JobArray[$key].State -eq "Completed") {
                $listsToDelete += $key
            }else{
                
            }
        }
        foreach($listToDelete in $listsToDelete) {
            $JobArray.Remove($listToDelete)
        }
} while ($JobArray.count)
$JobTimes
RemoveAllVirtualDesktops]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
        </parameters>
      </runner>
      <runner id="RUNNER_15" name="Cover. Find PID proccess" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[Start-Sleep -s 5
$cmdOutput = Get-Content "%system.teamcity.build.tempDir%\Cover.Log" -First 1
$cmdOutput
$PIDArray = $cmdOutput.Split('.')
$PID_ID = $PIDArray[ $PIDArray.Count - 2 ]

echo "##teamcity[setParameter name='env.PID_ID' value='$PID_ID']"

Start-Sleep -s 5]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_4" name="Cover stop" type="simpleRunner">
        <conditions>
          <equals name="env.StartDebug" value="true" />
        </conditions>
        <parameters>
          <param name="script.content" value="coverage-cli stop -p %env.PID_ID%" />
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_25" name="taskkill" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$Proc = Get-Process -ID %env.dbgs_PID% -ErrorAction SilentlyContinue
If ($Proc) {
    Stop-Process -ID %env.dbgs_PID% -Force
}
Start-Sleep 1
$Proc = Get-Process -ID %env.PID_ID% -ErrorAction SilentlyContinue
If ($Proc) {
    Stop-Process -ID %env.PID_ID% -Force
}
Start-Sleep 1
Stop-Process -Name "1cv8" -Force
Start-Sleep 10
Stop-Process -Name "1cv8c" -Force
Start-Sleep 10]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_16" name="Cover convert" type="simpleRunner">
        <conditions>
          <equals name="env.StartDebug" value="true" />
        </conditions>
        <parameters>
          <param name="script.content" value="coverage-cli convert --input %system.teamcity.build.workingDir%/Cover.csv --output  %system.teamcity.build.workingDir%/Cover.xml --sources IRP\src --format EDT &amp; powershell -command &quot;(Get-Content %system.teamcity.build.workingDir%/Cover.xml) | ForEach-Object { $_ -replace '\\', '/' } | Set-Content %system.teamcity.build.workingDir%/Cover.xml&quot;" />
          <param name="teamcity.step.mode" value="execute_always" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="RUNNER_13" name="Allure Report" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code"><![CDATA[#New-Item -Path "VAResult\allure\base" -Name "history" -ItemType "directory" -Force
#Copy-Item -Path "allure-history\*" -Destination "VAResult\allure\base\history" -Force
%teamcity.tool.allure-commandline%\bin\allure.bat generate "VAResult/allure/*" --clean -o "allure-report"
Compress-Archive -Path "allure-report/*" -DestinationPath "allure-report.zip"]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
      <runner id="RUNNER_71" name="Zip cover file" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_noprofile" value="true" />
          <param name="jetbrains_powershell_script_code" value="Compress-Archive -Path Cover.xml -DestinationPath Cover.zip" />
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="execute_always" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="IRP_GitTC" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_4" type="buildDependencyTrigger">
        <parameters>
          <param name="afterSuccessfulBuildOnly" value="true" />
          <param name="branchFilter" value="+:*" />
          <param name="dependsOn" value="IRP_BuildCF" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="BUILD_EXT_3" type="commit-status-publisher">
        <parameters>
          <param name="github_authentication_type" value="token" />
          <param name="github_host" value="https://api.github.com" />
          <param name="github_oauth_user" value="DitriXNew" />
          <param name="publisherId" value="githubStatusPublisher" />
          <param name="secure:github_access_token" value="credentialsJSON:1fa3b09b-5cd9-4521-80c7-3c52664962a9" />
          <param name="vcsRootId" value="IRP_GitTC" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_4" type="pullRequests">
        <parameters>
          <param name="authenticationType" value="token" />
          <param name="filterAuthorRole" value="MEMBER" />
          <param name="providerType" value="github" />
          <param name="secure:accessToken" value="credentialsJSON:1fa3b09b-5cd9-4521-80c7-3c52664962a9" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_13" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="false" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="#workingDir#" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%system.teamcity.build.workingDir%" />
          <param name="teamcity.file.content.replacer.wildcards" value="+:features/**.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_19" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="false" />
          <param name="teamcity.file.content.replacer.file.encoding" value="UTF-8" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="UTF-8" />
          <param name="teamcity.file.content.replacer.pattern" value="And I click &quot;Post&quot; button" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="And I click &quot;Send&quot; button" />
          <param name="teamcity.file.content.replacer.wildcards" value="**/*.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_27" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="true" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="#KeyTcmbGovTr#" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="false" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%env.TR_Bank_Key%" />
          <param name="teamcity.file.content.replacer.wildcards" value="+:features/**.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_33" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="true" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="##Login##" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%env.LoginTo1C%" />
          <param name="teamcity.file.content.replacer.wildcards" value="**/*.feature" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_34" type="JetBrains.FileContentReplacer">
        <parameters>
          <param name="teamcity.file.content.replacer.failBuild" value="true" />
          <param name="teamcity.file.content.replacer.file.encoding" value="autodetect" />
          <param name="teamcity.file.content.replacer.file.encoding.custom" value="autodetect" />
          <param name="teamcity.file.content.replacer.pattern" value="##Password##" />
          <param name="teamcity.file.content.replacer.pattern.case.sensitive" value="true" />
          <param name="teamcity.file.content.replacer.regexMode" value="FIXED_STRINGS" />
          <param name="teamcity.file.content.replacer.replacement" value="%env.PassTo1C%" />
          <param name="teamcity.file.content.replacer.wildcards" value="**/*.feature" />
        </parameters>
      </extension>
    </build-extensions>
    <artifact-dependencies>
      <dependency id="ARTIFACT_DEPENDENCY_2" sourceBuildTypeId="ExternalDataProcessor_ExtConvertToCfe" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="ExternalDataProcessors=&gt;DataProcessor" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_5" sourceBuildTypeId="IRP_BuildCF" cleanDestination="false">
        <revisionRule name="sameChainOrLastFinished" revision="latest.sameChainOrLastFinished" />
        <artifact sourcePath="%teamcity.project.id%.cf" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_6" sourceBuildTypeId="IRP_RunVA" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" branch="+:develop" />
        <artifact sourcePath="allure-report.zip!/history=&gt;allure-history" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_11" sourceBuildTypeId="IRP_AdditionalFunctionality_Build" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="IRP_AdditionalFunctionality.cfe=&gt;DataProcessor/" />
      </dependency>
      <dependency id="ARTIFACT_DEPENDENCY_10" sourceBuildTypeId="Reports_Build" cleanDestination="false">
        <revisionRule name="lastSuccessful" revision="latest.lastSuccessful" />
        <artifact sourcePath="Reports.cfe=&gt;DataProcessor" />
      </dependency>
    </artifact-dependencies>
    <dependencies>
      <depend-on sourceBuildTypeId="IRP_BuildCF">
        <options>
          <option name="run-build-if-dependency-failed" value="CANCEL" />
          <option name="run-build-if-dependency-failed-to-start" value="CANCEL" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

